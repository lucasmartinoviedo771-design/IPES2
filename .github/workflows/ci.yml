name: CI (lint + django smoke)
on:
  push:
    branches: [ main, dev ]
  pull_request:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependencias
        run: |
          sudo apt-get update
          sudo apt-get install -y libmysqlclient-dev || true
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install pytest pytest-django ruff

      - name: Lint (ruff) ‚Äî informativo
        run: ruff check . || true

      # üîé Auto-detectar d√≥nde est√° manage.py
      - name: Detectar manage.py
        id: where
        run: |
          set -e
          if [ -f manage.py ]; then
            echo "manage=manage.py" >> $GITHUB_OUTPUT
          elif [ -f academia_project/manage.py ]; then
            echo "manage=academia_project/manage.py" >> $GITHUB_OUTPUT
          else
            echo "No se encontr√≥ manage.py en el repo"; ls -la; echo "---"; ls -la academia_project || true
            exit 1
          fi

      - name: Django check (config b√°sica)
        env:
          DJANGO_SETTINGS_MODULE: academia_project.settings
          USE_SQLITE_FOR_TESTS: "1"
          DJANGO_DEBUG: "1"
        run: |
          python "${{ steps.where.outputs.manage }}" check

      # ‚ö†Ô∏è sigue informativo por ahora
      - name: Django check --deploy (simular prod, no bloqueante)
        env:
          DJANGO_SETTINGS_MODULE: academia_project.settings
          USE_SQLITE_FOR_TESTS: "1"
          DJANGO_DEBUG: "0"
          DJANGO_SECRET_KEY: "dummy-key-for-ci"
          DJANGO_ALLOWED_HOSTS: "example.com"
          DJANGO_CSRF_TRUSTED_ORIGINS: "https://example.com"
        run: |
          python "${{ steps.where.outputs.manage }}" check --deploy --fail-level WARNING || true

      # ‚úÖ Verificar que no falten migraciones
      - name: Makemigrations --check (no debe generar nada)
        env:
          DJANGO_SETTINGS_MODULE: academia_project.settings
          USE_SQLITE_FOR_TESTS: "1"
        run: |
          python "${{ steps.where.outputs.manage }}" makemigrations --check --dry-run

      # ‚úÖ Aplicar migraciones reales en SQLite
      - name: Migrate (SQLite)
        env:
          DJANGO_SETTINGS_MODULE: academia_project.settings
          USE_SQLITE_FOR_TESTS: "1"
        run: |
          python "${{ steps.where.outputs.manage }}" migrate --noinput

      # ‚úÖ Tests sin --nomigrations
      - name: Tests (pytest)
        env:
          DJANGO_SETTINGS_MODULE: academia_project.settings
          USE_SQLITE_FOR_TESTS: "1"
          RUN_STRICT_HORARIOS_TESTS: "0"   # seguimos apagados hasta mapear campos reales
        run: pytest -q
